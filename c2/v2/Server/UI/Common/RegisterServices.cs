using Microsoft.EntityFrameworkCore;
using Persistence.Common.Persistence;
using Persistence.Features.Client.Repositories;
using Persistence.Features.Client.Services;
using Persistence.Features.Command.Repositories;
using Persistence.Features.Command.Services;

namespace UI.Common;

public static class RegisterServices
{
    public static void ConfigureServices(this WebApplicationBuilder builder)
    {
        // default stuff
        builder.Services.AddRazorComponents()
            .AddInteractiveServerComponents();
        
        // services - Persistence
        builder.Services.AddScoped<IClientRepository, ClientRepository>();
        builder.Services.AddScoped<ICommandRepository, CommandRepository>();
        
        builder.Services.AddScoped<IClientService, ClientService>();
        builder.Services.AddScoped<ICommandService, CommandService>();
        
        // database
        // TODO: get connection string from config
        builder.Services.AddDbContext<DataContext>(options =>
            options.UseSqlite("Data Source=/home/lucas/workspace/code/db/c2.sqlite"));
        
        // MediatR: ensures that MediatR searches for handlers within the class library "Persistence"
        const string classLibraryName = "Persistence";
        var assembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == classLibraryName);
        builder.Services.AddMediatR(configuration =>
        {
            if (assembly != null) configuration.RegisterServicesFromAssembly(assembly);
        });
    }
}