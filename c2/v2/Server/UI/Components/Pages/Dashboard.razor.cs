using UI.Models;

namespace UI.Components.Pages;

public partial class Dashboard
{
    private string? _message;
    private string? _newCommand;
    private bool _allClientsChecked;
    private List<ClientViewModel>? _clients;
    
    protected override async Task OnInitializedAsync()
    {
        await FetchClients();
    }

    #region Button
    private async Task RefreshButton()
    {
        await FetchClients();
        StateHasChanged();
    }

    private async Task ChangeCommand()
    {
        if (_clients == null) return;
            
        foreach (var client in _clients.Where(client => client.Checked))
        {
            client.Command = _newCommand;
            var clientModel = ModelMapper.ClientViewModelToClient(client);
            await clientService.UpdateClientAsync(clientModel);
        }

        _newCommand = string.Empty;
    }
    #endregion

    #region Helper
    private async Task FetchClients()
    {
        var result = await clientService.GetClientsAsync();
        if (!result.Success)
        {
            _message = !string.IsNullOrEmpty(result.Message)
                ? result.Message
                : "Error while fetching all clients from the database";
            return;
        }

        if (result.Data == null || result.Data.Count == 0)
        {
            _message = "No clients found in the database";
            return;
        }

        _clients = ModelMapper.ClientsToClientViewModels(result.Data);
    }
    
    private bool AllClientsChecked
    {
        get => _allClientsChecked;
        set
        {
            if (_allClientsChecked != value)
            {
                _allClientsChecked = value;
                _clients?.ForEach(client => client.Checked = _allClientsChecked);
            }
        }
    }
    #endregion
}