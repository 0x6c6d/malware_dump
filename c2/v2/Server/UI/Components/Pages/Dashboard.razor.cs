using System.Globalization;
using Microsoft.AspNetCore.Components;
using Persistence.Features.Command.Models;
using UI.Models;

namespace UI.Components.Pages;

public partial class Dashboard
{
    private string? _message;
    private string? _newCommand;
    private bool _allClientsChecked;
    private List<ClientViewModel>? _allClients;
    private List<ClientViewModel>? _filteredClients;
    private ClientDetails _clientDetailsRef = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchClients();
    }

    #region Button

    private async Task RefreshButton()
    {
        await FetchClients();
        StateHasChanged();
    }

    private async Task ChangeCommand()
    {
        if (_allClients == null) return;

        foreach (var client in _allClients.Where(client => client.Checked))
        {
            client.Command = _newCommand;
            var clientModel = ModelMapper.ClientViewModelToClient(client);
            await clientService.UpdateClientAsync(clientModel);
        }

        _newCommand = string.Empty;
    }
    
    private async Task ShowClientDetails(ClientViewModel model)
    {
        await _clientDetailsRef.OpenModel(model);
    }

    #endregion

    #region Helper

    private async Task FetchClients()
    {
        var result = await clientService.GetClientsAsync();
        if (!result.Success)
        {
            _message = !string.IsNullOrEmpty(result.Message)
                ? result.Message
                : "Error while fetching all clients from the database";
            return;
        }

        if (result.Data == null || result.Data.Count == 0)
        {
            _message = "No clients found in the database";
            return;
        }

        _allClients = ModelMapper.ClientsToClientViewModels(result.Data);
        _filteredClients = _allClients;
    }
    
    private void FilterClients(ChangeEventArgs e)
    {
        var searchText = e.Value?.ToString();
        if (string.IsNullOrEmpty(searchText))
        {
            _filteredClients = _allClients;
        }
        else
        {
            _filteredClients = _allClients?.Where(client =>
                client is { Ip: not null, Command: not null } &&
                (client.Ip.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                 client.Port.ToString().Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                 client.Command.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                 client.LastConnection.ToString(CultureInfo.InvariantCulture)
                     .Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                 client.LastModifiedDateTime.ToString(CultureInfo.InvariantCulture)
                     .Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                 client.CreatedDateTime.ToString(CultureInfo.InvariantCulture)
                     .Contains(searchText, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }
    }

    private bool AllClientsChecked
    {
        get => _allClientsChecked;
        set
        {
            if (_allClientsChecked != value)
            {
                _allClientsChecked = value;
                _allClients?.ForEach(client => client.Checked = _allClientsChecked);
            }
        }
    }

    #endregion
}