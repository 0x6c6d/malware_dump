using System.Collections.Concurrent;
using System.Net;
using System.Net.Sockets;
using System.Text;
using Persistence.Features.Client.Services;

namespace Server.Features.Networking.Services;

public class NetworkingService(IClientService clientService) : INetworkingService
{
    private static readonly char[] Separator = ['\0'];

    public async Task HandleNewConnection(TcpClient client, int clientId, ConcurrentDictionary<int, TcpClient> clients)
    {
        // TODO: read buffer size from config
        var buffer = new byte[4096];
        var stream = client.GetStream();

        try
        {
            if (client.Client.RemoteEndPoint is not IPEndPoint ipEndPoint)
            {
                clients.TryRemove(clientId, out _);
                client.Close();
                Console.WriteLine("[w] Client IPEndPoint was null");
                return;
            }
            
            var ip = ipEndPoint.Address;
            var port = ipEndPoint.Port;
            var result = await clientService.GetClientByIpAsync(ip.ToString());
            
            byte[] send;
            // handle case when client is new
            if (result.Data == null || !result.Success)
            {
                send = "whoami"u8.ToArray();
                Console.WriteLine($"[i] New connection from client {client.Client.RemoteEndPoint}");

                await clientService.CreateClientAsync(ip.ToString(), port, Encoding.ASCII.GetString(send));
            }
            // handle case when client already connected to the server in the past
            else
            {
                send = Encoding.ASCII.GetBytes(result.Data.Command);
                Console.WriteLine($"[i] Client {client.Client.RemoteEndPoint} already connected in the past");
                
                await clientService.UpdateClientAsync(result.Data.Id, result.Data.Ip, port, result.Data.Command);
            }
            
            await stream.WriteAsync(send);
            while (await stream.ReadAsync(buffer) != 0)
            {
                var data = Encoding.ASCII.GetString(buffer).Split(Separator, StringSplitOptions.RemoveEmptyEntries);
                Console.WriteLine($"[i] Message from client {client.Client.RemoteEndPoint}: {data[0].Trim('\n')}");
            }
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("[w] HandleNewConnection() was canceled");
        }
        catch (Exception e)
        {
            Console.WriteLine($"[e] HandleNewConnection() error message: {e}");
        }
    }
}