using System.Collections.Concurrent;
using System.Net.Sockets;
using System.Text;

namespace Server.Features.Tcp.Services;

public class ConnectionHandler : IConnectionHandler
{
    private static readonly char[] Separator = ['\0'];

    public async Task HandleNewClient(TcpClient client, int clientId, ConcurrentDictionary<int, TcpClient> clients)
    {
        // TODO: read buffer size from config
        var buffer = new byte[4096];
        var stream = client.GetStream();

        try
        {
            var send = "whoami"u8.ToArray();
            await stream.WriteAsync(send);

            while (await stream.ReadAsync(buffer) != 0)
            {
                var data = Encoding.ASCII.GetString(buffer).Split(Separator, StringSplitOptions.RemoveEmptyEntries);
                Console.WriteLine($"[i] Message from client {clientId} ({client.Client.RemoteEndPoint}): {data[0].Trim('\n')}");
            }

            clients.TryRemove(clientId, out _);
            client.Close();
            Console.WriteLine($"[i] Client {clientId} disconnected");
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("[w] HandleNewClient() was canceled");
        }
        catch (Exception e)
        {
            Console.WriteLine($"[e] Error message: {e}");
        }
    }
}