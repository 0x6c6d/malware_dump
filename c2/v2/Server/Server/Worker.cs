using System.Collections.Concurrent;
using System.Net;
using System.Net.Sockets;
using Server.Features.Networking.Services;

namespace Server;

public class Worker(IServiceProvider serviceProvider) : BackgroundService
{
    private int _clientId;
    private const int Port = 50000; // TODO: read port from config
    private readonly ConcurrentDictionary<int, TcpClient> _clients = new();
    private readonly TcpListener _server = new(IPAddress.Any, Port);
    
    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _server.Start();
        Console.WriteLine($"[i] Started server on port {Port}");
        
        while (!stoppingToken.IsCancellationRequested)
        {
            if (!_server.Pending())
            {
                await Task.Delay(1000, stoppingToken);
                continue;
            }
            
            var client = await _server.AcceptTcpClientAsync(stoppingToken);
            var currentId = _clientId++;
            _clients.TryAdd(currentId, client);
            Console.WriteLine($"[i] New connection from {client.Client.RemoteEndPoint}");

            await using var scope = serviceProvider.CreateAsyncScope();
            var networkingService = scope.ServiceProvider.GetRequiredService<INetworkingService>();
            await Task.Run(() => networkingService.HandleNewConnection(client, currentId, _clients), stoppingToken);
        }
    }
}