using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Persistence.Common.Persistence;
using Persistence.Features.Client.Repositories;
using Persistence.Features.Client.Services;
using Server.Features.Networking.Services;

namespace Server.Common;

public static class RegisterServices
{
    public static void ConfigureServices(this IServiceCollection services)
    {
        // services - Server
        services.AddSingleton<Server.Features.Server.Server>();
        services.AddScoped<INetworkingService, NetworkingService>();
        
        // services - Persistence
        services.AddScoped<IClientRepository, ClientRepository>();
        services.AddScoped<IClientService, ClientService>();
        
        // database
        // TODO: get connection string from config
        services.AddDbContext<DataContext>(options =>
            options.UseSqlite("Data Source=db.sqlite"));
        
        // MediatR: ensures that MediatR searches for handlers within the class library "Persistence"
        const string classLibraryName = "Persistence";
        var assembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == classLibraryName);
        services.AddMediatR(configuration =>
        {
            if (assembly != null) configuration.RegisterServicesFromAssembly(assembly);
        });
    }
}