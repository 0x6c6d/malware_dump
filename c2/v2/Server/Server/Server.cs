using System.Net;
using System.Net.Sockets;

namespace Server;

public class Server(int port, int maxConnections)
{
    private readonly Dictionary<int, Client> _clients = new();
    private readonly TcpListener _server = new(IPAddress.Any, port);

    public void Start()
    {
        InitializeServerData();
        
        _server.Start();
        _server.BeginAcceptTcpClient(TcpConnectCallback, null);
        Console.WriteLine($"[i] Server started on port {port}");
    }

    private void TcpConnectCallback(IAsyncResult result)
    {
        var client = _server.EndAcceptTcpClient(result);
        _server.BeginAcceptTcpClient(TcpConnectCallback, null);
        Console.WriteLine($"[i] Incoming connection from: {client.Client.RemoteEndPoint}");
        
        for (var i = 1; i <= maxConnections; i++)
        { 
            _clients[i].TcpConnection.Connect(client);
            return;
        }
        
        Console.WriteLine($"[w] Server is full: Failed to connect {client.Client.RemoteEndPoint}");
    }

    private void InitializeServerData()
    {
        for (var i = 1; i <= maxConnections; i++)
        {
            _clients.Add(i, new Client(i));
        }
    }
}