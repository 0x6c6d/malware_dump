using Backend.Features.Settings.Models;
using Backend.Features.Settings.Operations.Create;
using Backend.Features.Settings.Operations.Read;
using Backend.Features.Settings.Operations.Update;

namespace Backend.Features.Settings.Services;

public class SettingsService(IMediator mediator)
{
    public async Task<ServiceResponse<SettingsModel>> GetSettingsAsync()
    {
        try
        {
            var result = await mediator.Send(new ReadSettingsRequest());
            var settings = SettingsMapper.ReadSettingsReturnToSettings(result);
            
            return new ServiceResponse<SettingsModel> { Data = settings };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<SettingsModel>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
    
    public async Task<ServiceResponse<Guid>> CreateSettingsAsync(string defaultCommand, int bufferSizeReceive)
    {
        try
        {
            var result = await mediator.Send(new CreateSettingsRequest() { DefaultCommand = defaultCommand, BufferSizeReceive = bufferSizeReceive});
            if (result == Guid.Empty)
            {
                return new ServiceResponse<Guid>
                {
                    Success = false,
                    Message = "Unable to create settings."
                };
            }
            
            return new ServiceResponse<Guid> { Data = result };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<Guid>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
    
    public async Task<ServiceResponse<bool>> UpdateSettingsAsync(SettingsModel settings)
    {
        try
        {
            await mediator.Send(new UpdateSettingsRequest()
            {
                Id = settings.Id,
                DefaultCommand = settings.DefaultCommand,
                BufferSizeReceive = settings.BufferSizeReceive
            });

            return new ServiceResponse<bool> { Data = true };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<bool>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
}