using Persistence.Features.Client.Models;
using Persistence.Features.Client.Operations.Create;
using Persistence.Features.Client.Operations.Delete;
using Persistence.Features.Client.Operations.Read.All;
using Persistence.Features.Client.Operations.Read.One;
using Persistence.Features.Client.Operations.Update;

namespace Persistence.Features.Client.Services;

public class ClientService(IMediator mediator) : IClientService
{
    public async Task<ServiceResponse<List<ClientModel>?>> GetClientsAsync()
    {
        try
        {
            var result = await mediator.Send(new GetClientsRequest());
            var clients = ClientMapper.GetClientsReturnToClients(result);
            
            return new ServiceResponse<List<ClientModel>?> { Data = clients };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<List<ClientModel>?>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
    
    public async Task<ServiceResponse<ClientModel>> GetClientByIpAsync(string ip)
    {
        try
        {
            var result = await mediator.Send(new GetClientRequest() { Ip = ip });
            var client = ClientMapper.GetClientReturnToClient(result);
            
            return new ServiceResponse<ClientModel> { Data = client };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<ClientModel>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
    
    public async Task<ServiceResponse<Guid>> CreateClientAsync(string ip, int port, string command)
    {
        try
        {
            var result = await mediator.Send(new CreateClientRequest() { Ip = ip, Port = port, Command = command});
            if (result == Guid.Empty)
            {
                return new ServiceResponse<Guid>
                {
                    Success = false,
                    Message = "Unable to create client."
                };
            }
            
            return new ServiceResponse<Guid> { Data = result };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<Guid>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
    
    public async Task<ServiceResponse<bool>> UpdateClientAsync(Guid id, string ip, int port, string command)
    {
        try
        {
            await mediator.Send(new UpdateClientRequest()
            {
                Id = id,
                Ip = ip,
                Port = port,
                Command = command
            });

            return new ServiceResponse<bool> { Data = true };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<bool>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
    
    public async Task<ServiceResponse<bool>> DeleteClientByIdAsync(Guid id)
    {
        try
        {
            await mediator.Send(new DeleteClientRequest() { Id = id });
            return new ServiceResponse<bool> { Data = true };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<bool>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
}