using Persistence.Features.Command.Models;
using Persistence.Features.Command.Operations.Create;
using Persistence.Features.Command.Operations.Delete.ById;
using Persistence.Features.Command.Operations.Delete.ByIp;
using Persistence.Features.Command.Operations.Read.All;
using Persistence.Features.Command.Operations.Read.One;
using Persistence.Features.Command.Operations.Read.PerClient;
using Persistence.Features.Command.Operations.Update;

namespace Persistence.Features.Command.Services;

public class CommandService(IMediator mediator) : ICommandService
{
    public async Task<ServiceResponse<List<CommandModel>?>> GetCommandsAsync()
    {
        try
        {
            var result = await mediator.Send(new GetCommandsRequest());
            var commands = CommandMapper.GetCommandsReturnToCommands(result);
            
            return new ServiceResponse<List<CommandModel>?> { Data = commands };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<List<CommandModel>?>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
    
    public async Task<ServiceResponse<List<CommandModel>?>> GetCommandPerClientAsync(string ip)
    {
        try
        {
            var result = await mediator.Send(new GetCommandsPerIpRequest() { Ip = ip });
            var command = CommandMapper.GetCommandsByIpReturnToCommands(result);
            
            return new ServiceResponse<List<CommandModel>?> { Data = command };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<List<CommandModel>?>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
    
    public async Task<ServiceResponse<CommandModel>> GetCommandByIdAsync(Guid id)
    {
        try
        {
            var result = await mediator.Send(new GetCommandRequest() { Id = id });
            var command = CommandMapper.GetCommandReturnToCommand(result);
            
            return new ServiceResponse<CommandModel> { Data = command };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<CommandModel>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
    
    public async Task<ServiceResponse<Guid>> CreateCommandAsync(string ip, string command, string response)
    {
        try
        {
            var result = await mediator.Send(new CreateCommandRequest() { Ip = ip, Command = command, Response = response });
            if (result == Guid.Empty)
            {
                return new ServiceResponse<Guid>
                {
                    Success = false,
                    Message = "Unable to create command."
                };
            }
            
            return new ServiceResponse<Guid> { Data = result };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<Guid>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
    
    public async Task<ServiceResponse<bool>> UpdateCommandAsync(CommandModel command)
    {
        try
        {
            await mediator.Send(new UpdateCommandRequest()
            {
                Id = command.Id,
                Ip = command.Ip,
                Command = command.Command,
                Response = command.Response,
                ExecutionDateTime = command.ExecutionDateTime,
            });

            return new ServiceResponse<bool> { Data = true };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<bool>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
    
    public async Task<ServiceResponse<bool>> DeleteCommandByIdAsync(Guid id)
    {
        try
        {
            await mediator.Send(new DeleteCommandByIdRequest() { Id = id });
            return new ServiceResponse<bool> { Data = true };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<bool>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
    
    public async Task<ServiceResponse<bool>> DeleteCommandByIpAsync(string ip)
    {
        try
        {
            await mediator.Send(new DeleteCommandsByIpRequest() { Ip = ip });
            return new ServiceResponse<bool> { Data = true };
        }
        catch (Exception ex)
        {
            return new ServiceResponse<bool>
            {
                Success = false,
                Message = ex.Message
            };
        }
    }
}